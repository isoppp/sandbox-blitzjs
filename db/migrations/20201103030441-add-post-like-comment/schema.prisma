// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum UserRole {
  USER_ROLE_ADMIN
  USER_ROLE_USER
}

enum PostStatus {
  POST_STATUS_DRAFT
  POST_STATUS_PUBLISHED
  POST_STATUS_UNPUBLISHED
}

// --------------------------------------

model User {
  id             Int           @default(autoincrement()) @id
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  displayId      String        @default(cuid()) @unique
  name           String?
  email          String        @unique
  hashedPassword String?
  sessions       Session[]
  roles          Role[]
  posts          Post[]
  postLikes      LikePost[]
  postComments   PostComment[]
}

model Session {
  id                 Int       @default(autoincrement()) @id
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
}

model Role {
  id    Int      @default(autoincrement()) @id
  name  UserRole @unique
  users User[]
}

model Project {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
}

model Post {
  id        Int           @default(autoincrement()) @id
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  slug      String        @default(cuid()) @unique
  title     String
  content   String
  status    PostStatus    @default(POST_STATUS_DRAFT)
  author    User          @relation(fields: [authorId], references: [id])
  authorId  Int
  likes     LikePost[]
  comments  PostComment[]

  @@index([status])
}

model LikePost {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  @@unique([postId, userId])
}

model PostComment {
  id        Int           @default(autoincrement()) @id
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  content   String
  post      Post          @relation(fields: [postId], references: [id])
  postId    Int
  user      User          @relation(fields: [userId], references: [id])
  userId    Int
  parentId  Int?
  parent    PostComment?  @relation("CommentChildren", fields: [parentId], references: [id])
  comments  PostComment[] @relation("CommentChildren")
}
